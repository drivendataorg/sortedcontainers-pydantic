name: release
run-name: Release of ${{ inputs.version }}${{ inputs.dry-run && ' (dry run)' || '' }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag'
        required: true
      dry-run:
        description: 'Dry run'
        required: false
        default: false
        type: boolean

jobs:
  check-version:
    name: Check metadata version is correct
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-suffix: "dev"
          cache-dependency-glob: |
            uv.lock

      - name: Check that versions match
        run: |
          echo "Input version tag: [${{ github.event.inputs.version }}] "
          PACKAGE_VERSION=$(uv run python -m vspect read .)
          echo "Package version: [$PACKAGE_VERSION]"
          [[ ${{ github.event.inputs.version }} == "v$PACKAGE_VERSION" ]] || { exit 1; }

  build-and-inspect-package:
    name: Build and inspect package
    needs: check-version
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # Need both of these for attest-build-provenance-github
      id-token: write
      attestations: write

    steps:
      - uses: actions/checkout@v4
      - uses: hynek/build-and-inspect-python-package@v2
        with:
          attest-build-provenance-github: ${{ inputs.dry-run == 'false' && 'true' || 'false' }}

  upload-to-test-pypi:
    name: Upload package to Test PyPI
    needs: build-and-inspect-package
    if: github.event.inputs.dry-run == 'false'
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # Required for PyPI trusted publishing

    steps:
      - name: Download built artifact to dist/
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  upload-to-prod-pypi:
    name: Upload package to Prod PyPI
    needs: upload-to-test-pypi
    if: github.event.inputs.dry-run == 'false'
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # Required for PyPI trusted publishing

    steps:
      - name: Download built artifact to dist/
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.12.4

  create-github-release:
    name: Create GitHub release
    needs: upload-to-prod-pypi
    if: github.event.inputs.dry-run == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download built artifact to dist/
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist

      - id: extract-changelog
        uses: sean0x42/markdown-extract@v2.1.0
        with:
          file: CHANGELOG.md
          pattern: ${{ github.event.inputs.version }}

      - name: Write output to file
        run: |
          cat <<'__EOF__' > __CHANGELOG-extracted.md
          ${{ steps.extract-changelog.outputs.markdown }}
          __EOF__

      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.version }}
          commit: main
          artifacts: "dist/*.whl,dist/*.tar.gz"
          bodyFile: "__CHANGELOG-extracted.md"
